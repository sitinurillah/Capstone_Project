demo()
find.packages("devtools")
find.package("devtools")
install.packages("devtools")
a <- available.pavkages()
install.packages()
install.packages("slidify")
library(devtools)
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
install.packages("slidify")
library("slidify", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
source("http://bioconductior.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GenomicFeatures","AnnotationDbi"))
library(ggplot2)
library(ggplot2)
search()
install.packages("ggplot2")
library(ggplot2)
search()
install.packages("kernlab")
install.packages("caret")
library(ggplot2)
search()
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("kernlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(ggplot2)
search()
install.packages("makeslides")
install_github('ramnathv/makeslides')
library(ggplot2)
search()
install.packages("KernSmooth")
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- 1:4
y <- 2:3
x+y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
x[x >= 10] <- 4
x
x[x == 4] > 10
x
x[x >= 10] <- 4
x
x[x == 4] > 10
x
x[x >= 11] <- 4
x
x[x > 10] <- 4
x
x <- c(17, 14, 4, 5, 13, 12, 11)
x[x > 10] <- 4
x
x[x >= 11] <- 4
x
x[x >= 10] <- 4
x
getwd()
getwd()
swirl()
install.packages("swirl")
library(swirl)
swirl()
exit()
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringAsFactors =FALSE)
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
?read.csv
View(path2csv)
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?comparison
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
"!is.na(c(3, 5, NA, 10))"
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, siza_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
getwd()
swirl()
library(swirl)
ls(0)
ls()
rm(list=ls())
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran, package)
by_package
summarize(by_package, mean(size))
script_results_identical('pack_sum'); multi_expr_creates_var('pack_sum')
script_results_identical('pack_sum'); multi_expr_creates_var('pack_sum')
script_results_identical('pack_sum');
script_results_identical('pack_sum'); multi_expr_creates_var('pack_sum')
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
script_results_identical('pack_sum'); multi_expr_creates_var('pack_sum')
count = n()
#
package_summary <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
View(package_summary)
View(package_summary)
submit(summarize1.R)
submit()
reset()
submit()
submit()
submit()
submit()
View(package_summary)
count = n(),
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
script_results_identical('result1'); multi_expr_creates_var('result1')
submit()
script_results_identical('result2'); multi_expr_creates_var('result2')
submit()
submit()
View(result3)
script_vals_identical()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
script_vals_identical()
submit()
students3
submit()
?spread()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("gridExtra")
library(swirl)
swirl()
swirl()
swirl()
install_from_swirl("Regression Models")
install.packages("swirl")
library(swirl)
swirl()
install.package("swirl")
install.packages("swirl")
library(swirl)
swirl()
plot(child~parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ . - 1, trees)
'trees2 <- eliminate("Girth", trees)'
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ . - 1, trees2)
lapply(list(fit, fit2), coef)
exit
0
0
library(AppliedPredictiveModeling)
suppressMessages(library(caret))
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("library")
runApp("App-1")
shiny::runApp('Documents/Coursera Course')
radioButtons("Pahang", "15/03 - JohorDT vs Pahang",
c("JohorDT Win" = "win",
"Draw" = "draw",
"JohorDT Loss" = "loss"), inline=TRUE)
output$lTable <- renderDataTable(leagueTable, options=list(paging = FALSE,
searching = FALSE))
shiny::runApp('Documents/Coursera Course/Capstone_Project/Shiny')
